<policies>
	<inbound>
		<base />
		<!-- Extract the content from the messages array using JavaScript -->
		<log-to-eventhub logger-id="event-hub-logger">@{
                return new JObject(
                    new JProperty("EventTime", DateTime.UtcNow.ToString()),
                    new JProperty("ServiceName", context.Deployment.ServiceName),
                    new JProperty("RequestId", context.RequestId),
                    new JProperty("RequestIp", context.Request.IpAddress),
                    new JProperty("OperationName", context.Operation.Name)
                ).ToString();
            }</log-to-eventhub>
		<!-- <set-variable name="question" value="@{
            var requestBody = context.Request.Body.As<JObject>();
            var content = requestBody["messages"]?[0]?["content"]?.ToString() ?? "";
            return content;
        }" /> -->
		<!-- Construct a new JSON request -->
		<!--<set-body>@{
                var question = context.Variables.GetValueOrDefault<string>("question") ?? "";
                return $"{{\"question\": \"{question}\", \"history\": \"\", \"openai_key\": \"\", \"openai_base\": \"\", \"openai_deployment\": \"\", \"sqlserver\": \"\", \"database\": \"\", \"username\": \"\", \"password\": \"\"}}";
            }</set-body>
        <set-backend-service base-url="https://sqlgpt.azurewebsites.net/api/answer" /> -->
	</inbound>
	<!-- other sections -->
	<backend>
		<base />
	</backend>
	<outbound>
		<base />
		<!-- <set-body>@{
                var responseBody = context.Response.Body.As<string>();
                var responseObj = JObject.Parse(responseBody);

                var answer = responseObj["answer"]?.ToString() ?? "";
                var thought = responseObj["thought"]?.ToString() ?? "";

                var transformedResponse = new {
                    id = "chatcmpl-8OSLGeCSPQihcPaHxAJo2n8qGfbvj",
                    _object = "chat.completion",
                    created = 1700839510,
                    model = "gpt-35-turbo-16k",
                    choices = new[] {
                        new {
                            index = 0,
                            finish_reason = "stop",
                            message = new {
                                role = "assistant",
                                content = $"{answer} The Thought is: {thought}"
                            }
                        }
                    },
                    usage = new {
                        prompt_tokens = 15,
                        completion_tokens = 81,
                        total_tokens = 96
                    }
                };

                return JsonConvert.SerializeObject(transformedResponse);
            }</set-body> -->
	</outbound>
	<on-error>
		<base />
	</on-error>
</policies>